/************************************************************************/
/*																		*/
/*		BumpTest.java													*/
/*		Implemented by Calvin C Chiu									*/
/*		Edited by Calvin C Chiu, Kevin Sounthavong						*/
/*																		*/
/*																		*/
/************************************************************************/

package com.example.finalproject;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

/*************************************************/
/*												 */
/*	Bump API Library							 */
/*	https://github.com/bumptech/bump-api-android */
/*												 */	
import com.bump.api.BumpAPIIntents;
import com.bump.api.IBumpAPI;
/*************************************************/



public class BumpTest extends Activity
{
    private IBumpAPI api;							// New instance of BumpAPI
    protected FindLocation f1;						// New instance of FindLocation
    protected long channelID;						// ChannelID that will be generated by BumpAPI
    protected Button btnMap;						// Find Friends Button
    protected Button btnRefresh;					// Fresh Location Button
    protected double userLat,userLong;				// User's location
    protected double friendLat,friendLong;			// Friend's location
    protected String userName,friendName;			// User's and friend's names respectively
    protected PlacesList nearPlaces;				// New instance of PlacesList
    protected String friendInfo;					// A String composed of name and location with a space in between
    protected Intent i; 							// New instance of intent
    protected String delims;						// " "
    protected ProgressDialog _busyDialog;			// Busy dialog
    protected TextView friendname;					// TextView of a friend's name
    protected TextView location;					// TextView of friend's location
    protected TextView myloc;						// TextView of my location
    	
    /* Bump API Connection Configuration*/
    
    private final ServiceConnection connection = new ServiceConnection() {
        public void onServiceConnected(ComponentName className, IBinder binder) {

            Log.i("BumpTest", "onServiceConnected");
            api = IBumpAPI.Stub.asInterface(binder);
            new Thread() {
                public void run() {
                    try {
                        api.configure("8cf484d14e5640b9a7d1216ba84ac4af",
                                "Bump User");
                    } catch (RemoteException e) {
                        Log.w("BumpTest", e);
                    }

                }
            }.start();

            Log.d("Bump Test", "Service connected");
        }

        public void onServiceDisconnected(ComponentName className) {
            Log.d("Bump Test", "Service disconnected");
        }
    };
    
    /* Bump API Information Receiver and Sender */
    private final BroadcastReceiver receiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();
            try {
                if (action.equals(BumpAPIIntents.DATA_RECEIVED)) {
                    Log.i("Bump Test", "Received data from: " + api.userIDForChannelID(intent.getLongExtra("channelID", 0))); 
                    Log.i("Bump Test", "Data: " + new String(intent.getByteArrayExtra("data")));
                    
                    // get friends info
                    friendInfo=new String(intent.getByteArrayExtra("data"));
                    Log.d("friendInfo",friendInfo);
                    
                    // parse the String into 3 data
                    if(friendInfo!=null)
                    {
                    	String [] tokens = friendInfo.split(" ");                	 	
                    	friendName=tokens[0];
                	 	friendLat=Double.parseDouble(tokens[1]);
                	 	friendLong=Double.parseDouble(tokens[2]);

                	 	Log.d("FriendLat", Double.toString(friendLat));
                	 	Log.d("FriendLong", Double.toString(friendLong));
                	 	Log.d("FriendName", friendName);                    	 	                	 		
                    }                   
                    
                    
                } 
                else if (action.equals(BumpAPIIntents.MATCHED)) {
                    channelID = intent.getLongExtra("proposedChannelID", 0); 
                    Log.i("Bump Test", "Matched with: " + api.userIDForChannelID(channelID));
                    api.confirm(channelID, true);
                    Log.i("Bump Test", "Confirm sent"); 
                } 
                // Send my name and location when the channel is connected and confirmed
                else if (action.equals(BumpAPIIntents.CHANNEL_CONFIRMED)) {                	
                    channelID = intent.getLongExtra("channelID", 0);
                    Log.i("Bump Test", "Channel confirmed with " + api.userIDForChannelID(channelID));  
                    String sendInfo = userName + " " + f1.getLat()+ " " + f1.getLong();
                    api.send(channelID,sendInfo.getBytes());            
                } 
                else if (action.equals(BumpAPIIntents.NOT_MATCHED)) {
                    Log.i("Bump Test", "Not matched.");
                    Toast.makeText(getApplicationContext(), "Please Bump again.", Toast.LENGTH_SHORT).show();
                } 
                else if (action.equals(BumpAPIIntents.CONNECTED)) {
                	new Thread(new Runnable(){
                		public void run(){
                			Log.i("Bump Test", "Connected to Bump...");
                			try {
								api.enableBumping();
								Log.d("Bump Start", "Success");
							} catch (RemoteException e) {
								e.printStackTrace();
								Log.d("Bump Start", "Failed");
							}
                			runOnUiThread(new Runnable(){
                				public void run(){
                					//connected = true;
                					Toast.makeText(getApplicationContext(), "Bump is enabled", Toast.LENGTH_SHORT).show();
                					Log.d("BumpConnect", "Completed");
                					_busyDialog.dismiss();
                				}
                			});
                		}
                	}).start();
                }
            } catch (RemoteException e) {}
        } 
            
    };
    
   

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
      super.onConfigurationChanged(newConfig);
    }



    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
		f1 = new FindLocation(this);
		
		// UI Init
	    
        btnMap = (Button)findViewById(R.id.btnMap);
        btnRefresh=(Button) findViewById(R.id.btnRefresh);
        friendname = (TextView)findViewById(R.id.friendname);
        location = (TextView)findViewById(R.id.location);
        myloc = (TextView)findViewById(R.id.myloc);
        
        // UI Init ends
        
        i=getIntent();

        userName=i.getStringExtra("NAME");
        
        /* Bump: Binding Service onCreate */
        
    	_busyDialog = ProgressDialog.show(this,"Bump","Connecting to Service",true);
        bindService(new Intent(IBumpAPI.class.getName()),
                    connection, Context.BIND_AUTO_CREATE);
        Log.i("BumpTest", "boot");
   		IntentFilter filter = new IntentFilter();
   		filter.addAction(BumpAPIIntents.CHANNEL_CONFIRMED);
   		filter.addAction(BumpAPIIntents.DATA_RECEIVED);
   		filter.addAction(BumpAPIIntents.NOT_MATCHED);
   		filter.addAction(BumpAPIIntents.MATCHED);
   		filter.addAction(BumpAPIIntents.CONNECTED);
   		registerReceiver(receiver, filter);
            	
   		/* Binding ends */
   		
   		// get intent information from MainActivity.java
       	Intent mainIntent=getIntent();
       	if(mainIntent!=null)
           	{
       		userLat=mainIntent.getDoubleExtra("LAT", 0);
       		userLong=mainIntent.getDoubleExtra("LONG", 0);
       		userName=mainIntent.getStringExtra("NAME");
       		myloc.setText(userLat + ", " + userLong);
       		nearPlaces=(PlacesList) mainIntent.getSerializableExtra("near_places");
            }         	
        		
        
    }
    
    // Initialized by clicking Find Friend Button; starts Map Activity and sends intent

    public void FindFriend(View v)
    {
    	
    	Intent mapIntent=new Intent(this,Map.class);
    	Log.d("MapIntent", userName+ " " +userLat + " " + userLong);
    	Log.d("MapIntent2", friendName+ " " + friendLat + " " + friendLat);
    	mapIntent.putExtra("userLAT", userLat);
    	mapIntent.putExtra("userLONG", userLong);
    	mapIntent.putExtra("userNAME", userName);
    	
    	if(friendInfo!=null)
    	{
    		mapIntent.putExtra("friendNAME", friendName);
    		mapIntent.putExtra("friendLAT",friendLat);
    		mapIntent.putExtra("friendLong", friendLong);
    	}
    	
    	mapIntent.putExtra("userNearPlaces", nearPlaces);
    	startActivity(mapIntent);
    	
    	
    }
    
    
    // Initialized by clicking Refresh button; sends and receives new locations
    
    public void Refresh(View v)
    {
    	if(friendInfo!=null)
    	{
    		friendname.setText(friendName);
    		location.setText(friendLat + " ," + friendLong);
    	}
    	f1.getLocation();
		myloc.setText(f1.getLat() + ", " + f1.getLong());
		try {
			api.send(channelID, ((userName + " " + f1.getLat() +" " + f1.getLong())).getBytes());
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
     public void onStart() {
        Log.i("BumpTest", "onStart");
        super.onStart();
     }
     
     public void onRestart() {
        Log.i("BumpTest", "onRestart");
        super.onRestart();
     }

     public void onResume() {
        Log.i("BumpTest", "onResume");
        super.onResume();
     }

     public void onPause() {
        Log.i("BumpTest", "onPause");
        super.onPause();
     }

     public void onStop() {
        Log.i("BumpTest", "onStop");
        super.onStop();
     }

     // Unregister and destroy Bump service when the app is destroyed
     public void onDestroy() {
        Log.i("BumpTest", "onDestroy");
        unbindService(connection);
        unregisterReceiver(receiver);
        super.onDestroy();
     }
     
     public void parseFriendInfo()
     {
    	 String delims="[]+";
    	 String [] tokens=friendInfo.split(delims);
  
    	 friendLat=Double.parseDouble(tokens[0]);
    	 friendLong=Double.parseDouble(tokens[1]);
     }

}
